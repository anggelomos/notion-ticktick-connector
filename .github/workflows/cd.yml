# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on: [push, workflow_dispatch]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  NT_AUTH: ${{ secrets.NT_AUTH }}
  NT_TASKS_DB_ID: ${{ secrets.NT_TASKS_DB_ID }}
  NT_NOTES_DB_ID: ${{ secrets.NT_NOTES_DB_ID }}
  NT_STATS_DB_ID: ${{ secrets.NT_STATS_DB_ID }}
  NT_EXPENSES_DB_ID: ${{ secrets.NT_EXPENSES_DB_ID }}
  TT_USER: ${{ secrets.TT_USER }}
  TT_PASS: ${{ secrets.TT_PASS }}
  TICKTICK_IDS: ${{ secrets.TICKTICK_IDS }}

permissions:
  contents: read

jobs:
  test-repo:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install

    - name: Lint with ruff
      run: poetry run ruff check src
        
    - name: Lint with flake8
      run: poetry run flake8 src

    - name: Lint with mypy
      run: poetry run mypy src

    # TODO: Re-enable the tests once they are updated
    # - name: Test with pytest
    #   run: poetry run pytest --cov

  update-lambda:
      needs: test-repo
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build awscli

      - name: Create lambda package
        run: |
          mkdir lambda-deployment-package
          cp -r src main.py lambda_function.py lambda-deployment-package
          pip install -t lambda-deployment-package .
          cd lambda-deployment-package
          zip -r ../lambda-deployment-package.zip .
          cd ..

      - name: Upload lambda package
        run: aws lambda update-function-code --function-name ticktick-notion-connector --zip-file fileb://lambda-deployment-package.zip --region us-east-1
